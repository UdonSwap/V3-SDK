import { Token } from 'udonswap-sdk-core'
import { FeeAmount } from './constants'
import { Pool } from './entities/pool'
import { Staker } from './staker'
import { NonfungiblePositionManager } from './nonfungiblePositionManager'
import { encodeSqrtRatioX96 } from './utils/encodeSqrtRatioX96'

describe('Staker', () => {
  const reward = new Token(919, '0x115253bcd7D2c7ca706ca8605eE4Fd7D5fCEEBA0', 18, 'r', 'reward')
  const token0 = new Token(919, '0xF7ca2401709BC01Eba07d46c8d59e865C983e1AC', 18, 't0', 'token0')
  const token1 = new Token(919, '0x4Bd692dbA81074BC2FA9abDcffE7324680d7A1c1', 18, 't1', 'token1')

  const pool_0_1 = new Pool(token0, token1, FeeAmount.MEDIUM, encodeSqrtRatioX96(1, 1), 0, 0, [])

  const incentiveKey = {
    rewardToken: reward,
    pool: pool_0_1,
    startTime: 100,
    endTime: 200,
    refundee: '0x2aD8Ff82cB4d01989293628E603a01456d3fb8F9'
  }

  const incentiveKeys = [incentiveKey]
  incentiveKeys.push({
    rewardToken: reward,
    pool: pool_0_1,
    startTime: 50,
    endTime: 100,
    refundee: '0x081c5f0d021A80117796b8ae9063BECF3Bf50768'
  })

  const recipient = '0x0000000000000000000000000000000000000003'
  const sender = '0x0000000000000000000000000000000000000004'
  const tokenId = 1

  describe('#collectRewards', () => {
    it('succeeds with amount', () => {
      const { calldata, value } = Staker.collectRewards(incentiveKey, {
        tokenId: tokenId,
        recipient: recipient,
        amount: 1
      })
      console.log("calldata", calldata)
      expect(calldata).toEqual(
        '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c4f549ab42000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c9000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000002ad8ff82cb4d01989293628e603a01456d3fb8f900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000642f2d783d000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4f2d2909b000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c9000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000002ad8ff82cb4d01989293628e603a01456d3fb8f9000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toEqual('0x00')
    })

    it('succeeds no amount', () => {
      const { calldata, value } = Staker.collectRewards(incentiveKey, {
        tokenId: tokenId,
        recipient: recipient
      })
      console.log("calldata", calldata)
      expect(calldata).toEqual(
        '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c4f549ab42000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c9000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000002ad8ff82cb4d01989293628e603a01456d3fb8f900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000642f2d783d000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4f2d2909b000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c9000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000002ad8ff82cb4d01989293628e603a01456d3fb8f9000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toEqual('0x00')
    })
    it('succeeds multiple keys', () => {
      const { calldata, value } = Staker.collectRewards(incentiveKeys, {
        tokenId: tokenId,
        recipient: recipient
      })
      console.log("calldata", calldata)
      expect(calldata).toEqual(
        '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000c4f549ab42000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c9000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000002ad8ff82cb4d01989293628e603a01456d3fb8f900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000642f2d783d000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4f2d2909b000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c9000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000002ad8ff82cb4d01989293628e603a01456d3fb8f900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4f549ab42000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c900000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000064000000000000000000000000081c5f0d021a80117796b8ae9063becf3bf5076800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000642f2d783d000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4f2d2909b000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c900000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000064000000000000000000000000081c5f0d021a80117796b8ae9063becf3bf50768000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toEqual('0x00')
    })
  })
  describe('#withdrawToken', () => {
    it('succeeds with one keys', () => {
      const { calldata, value } = Staker.withdrawToken(incentiveKey, {
        tokenId: tokenId,
        recipient: recipient,
        amount: 0,
        owner: sender,
        data: '0x0000000000000000000000000000000000000008'
      })
      console.log("calldata", calldata)
      expect(calldata).toEqual(
        '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c4f549ab42000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c9000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000002ad8ff82cb4d01989293628e603a01456d3fb8f900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000642f2d783d000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a43c423f0b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toEqual('0x00')
    })

    it('succeeds with multiple keys', () => {
      const { calldata, value } = Staker.withdrawToken(incentiveKeys, {
        tokenId: tokenId,
        recipient: recipient,
        amount: 0,
        owner: sender,
        data: '0x0000000000000000000000000000000000000008'
      })
      console.log("calldata", calldata)
      expect(calldata).toEqual(
        '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000c4f549ab42000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c9000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000002ad8ff82cb4d01989293628e603a01456d3fb8f900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000642f2d783d000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4f549ab42000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c900000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000064000000000000000000000000081c5f0d021a80117796b8ae9063becf3bf5076800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000642f2d783d000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a43c423f0b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toEqual('0x00')
    })
  })

  describe('#encodeDeposit', () => {
    it('succeeds single key', () => {
      const deposit = Staker.encodeDeposit(incentiveKey)
      console.log("deposite", deposit)
      expect(deposit).toEqual(
        '0x000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c9000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000002ad8ff82cb4d01989293628e603a01456d3fb8f9'
      )
    })

    it('succeeds multiple keys', () => {
      const deposit = Staker.encodeDeposit(incentiveKeys)
      console.log("deposite", deposit)
      expect(deposit).toEqual(
        '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c9000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000002ad8ff82cb4d01989293628e603a01456d3fb8f9000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c900000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000064000000000000000000000000081c5f0d021a80117796b8ae9063becf3bf50768'
      )
    })
  })

  describe('#safeTransferFrom with correct data for staker', () => {
    it('succeeds', () => {
      const data = Staker.encodeDeposit(incentiveKey)

      const options = {
        sender,
        recipient,
        tokenId,
        data
      }
      const { calldata, value } = NonfungiblePositionManager.safeTransferFromParameters(options)
      console.log("calldata", calldata)
      expect(calldata).toEqual(
        '0xb88d4fde000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000115253bcd7d2c7ca706ca8605ee4fd7d5fceeba0000000000000000000000000f72aff3136dbb523a52e2da1385152f37e7079c9000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000002ad8ff82cb4d01989293628e603a01456d3fb8f9'
      )
      expect(value).toEqual('0x00')
    })
  })
})
